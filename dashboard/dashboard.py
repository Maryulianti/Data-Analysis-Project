# -*- coding: utf-8 -*-
"""Bike Sharing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hDU2FJ0K71WckQAaKSpl1G86liY0_AJL

## Proyek Analisis Data: Nama dataset
- Nama: Maryulianti
- Email: maryulianti27@gmail.com
- Id Dicoding:

## Menentukan Pertanyaan Bisnis

- Pada musim apa sepeda paling banyak dan paling sedikit dirental?
- Apakah Pengaruh cuaca terhadap total sepeda yang dirental?
- Jam berapa sepeda paling banyak disewa pada hari kerja dan hari libur?

## Menyaipkan semua library yang dibuthkan
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""## Data Wrangling

### Gathering Data

pada tahap ini mengimport kedua data yaitu day.csv dan hour.csv
"""

day = pd.read_csv('/content/day.csv')
hour = pd.read_csv('/content/hour.csv')
day.head()

hour.head()

"""### Assessing Data
Assesing Data "Day" dan "Hour"

"""

day.info()

#Melakukan pengecekan missing value pada data "Day"
day.isna().sum()

#Pengecekan parameter statistik data "Day"
day.describe()

#Mengecek duplikat data "Day"
print("Jumlah duplikat :", day.duplicated().sum())

"""Assesing Data "Hour"
"""

hour.info()

hour.isna().sum()

hour.describe()

print("jumlah duplikat :", hour.duplicated().sum())

"""Setelah melakukan tahap Assesing kedua data, tidak didapatkan missing value dan keanehan pada nilai statistik

## Cleaning Data

Menghapus kolom yang tidak diperlukan pada dataset "Day"
"""

#kedua kolom ini tidak diperlukan karena tidak dibutuhkan untuk dianalis
day_col_drop = ['windspeed', 'weekday']
day.drop(day_col_drop, axis=1, inplace=True)

day.head()

"""Mengubah nama kolom agar mudah untuk diingat dan dianalisis"""

day.rename(columns={
    'dteday' :'date',
    'yr' : 'year',
    'mnth':'month',
    'weathersit': 'weather',
    'cnt':'total'
}, inplace = True)

day.head()

"""Mapping nilai kolom berubah angka dan keterangan

Tujuannya dilakukan mapping agar mudah untuk dianalisa dan divisualisasikan


"""

#mapping kolom season
mapping_season = {
    1: 'Springer', 2: 'Summer',
    3: 'Fall', 4: 'Winter'
}
day['season'] = day['season'].map(mapping_season)


#mapping kolom year
mapping_year = {0: 2011, 1: 2012}
day['year'] = day['year'].map(mapping_year)

#mapping kolom bulan
mapping_month = {
    1: 'Jan', 2: 'Feb', 3: 'Mar',
    4: 'Apr', 5: 'May', 6: 'Jun',
    7: 'Jun', 8: 'Aug', 9: 'Sep',
    10: 'Oct', 11: 'Nov', 12: 'Dec',
}
day['month'] = day['month'].map(mapping_month)

#mapping kolom cuaca
mapping_weather = {
    1: 'Clear', 2: 'Mist',
    3: 'Light Rain/Snow', 4: 'Heavy Rain/Snow'
}
day['weather'] = day['weather'].map(mapping_weather)


day.head()

"""**Memperbaiki Data**


"""

day.info()

#mengubah type data kolom date ke type data datetime
day['date']= pd.to_datetime(day['date'])

#mengubah type date beberapa kolom ke category untuk menghemat memori dan meninggkatkan efisiensi eksekusi program
day['season']= day['season'].astype('category')
day['year']= day['year'].astype('category')
day['month']= day['month'].astype('category')
day['holiday']= day['holiday'].astype('category')
day['workingday']= day['workingday'].astype('category')
day['weather'] = day['weather'].astype('category')

day.info()

"""Membersihkan data pada dataset "Hour"
---
Menghapus beberapa kolom

"""

hour_col_drop = ['windspeed', 'weekday']
hour.drop(hour_col_drop, axis=1, inplace = True)

hour.head()

#Mengubah nama pada beberapa kolom
hour.rename(columns={
    'dteday' : 'date',
    'yr' : 'year',
    'mnth' : 'month',
    'hr' : 'hour',
    'weathersit' : 'weather',
    'cnt' : 'total'
}, inplace=True)

hour.head()

#Mapping nilai dari beberapa kolom menjadi keterangan
hour['season'] = hour['season'].map(mapping_season)
hour['year'] = hour['year'].map(mapping_year)
hour['month'] = hour['month'].map(mapping_month)
hour['weather'] = hour['weather'].map(mapping_weather)

hour.head()

"""**Memperbaiki beberapa tipe data**

"""

#mengubah type data kolom date ke type data datetime
hour['date']= pd.to_datetime(hour['date'])

#mengubah type date beberapa kolom ke category untuk menghemat memori dan meninggkatkan efisiensi eksekusi program
hour['season']= hour['season'].astype('category')
hour['year']= hour['year'].astype('category')
hour['month']= hour['month'].astype('category')
hour['holiday']= hour['holiday'].astype('category')
hour['workingday']= hour['workingday'].astype('category')
hour['weather'] = hour['weather'].astype('category')

hour.info()

"""## Exploratory Data Analysis (EDA)

### Explore Dataset Day

Eksplore jumlah total rental setiap bulan
"""

day.groupby(by=['year', 'month']).agg({
    'total': ['sum', 'max', 'min', 'mean']
})

"""Berdasarkan pada hasil diatas didapatkan beberapa insight:

1.   Ditahun 2011, total penyewaan sepeda tertinggi terdapat dibulan Juni dengan jumlah 284853 unit dan penyewaan sepeda terendah terdapat dibulan Januari dengan jumlah 38189 unit
2.   Ditahun 2012, penyewaan sepeda tertinggi terdapat dibulan Juni dengan jumlah 406437 unit, dan penyewaan paling terendah terdapat dibulan Februari dengan jumlah 103137 unit

**Eksplore jumlah total rental pada setiam musim**
"""

day.groupby(by='season').agg({
    'total': ['sum', 'max', 'min', 'mean'],
    'temp' : ['mean', 'max', 'min', 'std'],
    'atemp': ['mean', 'max', 'min', 'std'],
    'hum' : ['mean', 'max', 'min', 'std'],
})

day.groupby('season')[['registered', 'casual']].sum().reset_index()

"""Pada hasil diatas didapatkan beberapa insight mengenai musim

1.   Penyewaan paling banyak adalam di musim Fall dan yang paling sedikit adalah musin Springer. Hasilnya berupa rata-rata yang terbanyak terjadi dimusin Fall
2.   (Temp) Suhu Musim dari tertinggi ke terendah adalah Fall -> Summer -> Winter -> Springer
1.   (atemp) apparent temperature/Suhu yang dirasakan dari yang tertinggi ke terendah adalah Fall -> Summer -> Winter -> Springer
2.   (hum) kelembapan musim dari yang tertinggi ke terendah adalah Winter -> Fall -> Summer -> Springer

**Eksplore Cuaca terhadap Jumlah total Rental**
"""

day.groupby(by='weather').agg({
    'total': ['sum', 'max', 'min', 'mean']
})

day.groupby('weather')[['registered', 'casual']].sum().reset_index()

"""Berdasarkan hasil diatas dapat dilihat penyewaan sepeda terbanyak terjadi saat cuaca sedang cerah dan angka penyewaannya lebih tinggi dari keadaan cuaca lainnya

### Explore Dataset Hour

Eksplore jumlah total rental tiap jam pada hari kerja
"""

filter_workingday = hour[(hour["workingday"] == 1)]
hour_workingday = filter_workingday.groupby(by='hour').agg({
    'total': ['sum', 'max', 'min', 'mean']
})
hour_workingday.columns = hour_workingday.columns.droplevel(0)
hour_workingday.sort_values(by='sum', ascending=False)

"""Pada hasil diatas menunjukkan bahwa pada hari kerja penyewaan sepeda terbanyak terjadi pada pagi hari di jam 08.00 dan pada sore hari antara jam 17.00 - 18.00"""

filter_holiday = hour[(hour["holiday"] == 1)|(hour["workingday"] == 0)]
hour_holiday = filter_holiday.groupby(by='hour').agg({
    'total': ['sum', 'max', 'min', 'mean']
})
hour_holiday.columns = hour_holiday.columns.droplevel(0)
hour_holiday.sort_values(by='sum', ascending=False)

"""Berdasarkan hasi diatas penyewaan sepeda pada hari libur di 2 tahun terakhir menunjukkan bahwa total penyewaan terbanyak terjadi saat siang hari sampai sore hari di jam 12.00 - 16.00

## Visualization & Explanatory Analysis

### Pertanyaan 1: Pada musim apa sepeda paling banyak dan paling sedikit dirental?
"""

#membuat variabel total data pelanggan registered dan casual setiap season
plot_season = day.groupby('season')[['registered', 'casual']].sum().reset_index()

#membuat bar chart
plt.figure(figsize = (10, 5))
sns.barplot(
    data=plot_season,
    x='season',
    y='registered',
    label = 'Registered',
    color = 'tab:green'
)
sns.barplot(
    data=plot_season,
    x='season',
    y='casual',
    label='Casual',
    color ='tab:red'
)
plt.title('Total Sepeda yang disewakan di 2 Tahun Terakhir Berdasarkan Musim')
plt.xlabel(None)
plt.ylabel(None)
plt.legend()
plt.show()

"""Pada Gambar visualisasi bar chart diatas dapat dilihat bahwa penyewaan sepeda terjadi pada musim Fall, baik untuk pelanggan Registered maupun Casual dan yang paling rendah dalam penyewaan sepeda adalah musim Springer

### Pertanyaan 2: Apakah Pengaruh cuaca terhadap total sepeda yang dirental?
"""

#Membuat Variabel total data pelanggan berdasarkan cuaca
plot_weather = day.groupby(by='weather').agg({'total' : 'mean'}).reset_index()

#membuat bar chart
plt.figure(figsize=(10,4))
sns.barplot(
    data=plot_weather,
    x='weather',
    y='total'
)
plt.title('Rata-rata Sepeda yang Dirental Berdasarkan Pengaruh Cuaca')
plt.xlabel(None)
plt.ylabel(None)
plt.show()

"""Pada hasil bar chart diatas dapat dilihat bahwa pada cuaca Clear/Cerah memiliki rata-rata penyewaan paling banyak dan yang paling sedikit penyewaan sepeda berdasarkan kondisi cuaca adalah Light Rain/Snow. Hal ini terbukti bahwa jumlah penyewaan sepeda berpengaruh pada kondisi cuaca.

### Pertanyaan 3: Jam berapa sepeda paling banyak disewa pada hari kerja dan hari libur?
"""

#Membuat variabek total data pelanggan berdasarkan jam kerja
plot_hour_workingday = filter_workingday.groupby(by='hour').agg({
    'total': 'sum'
}).reset_index()

#Menentukan index kolom dengan total terbesar
max_col = plot_hour_workingday['total'].idxmax()

#Membuat bar plot
plt.figure(figsize=(10,5))
sns.barplot(
    data=plot_hour_workingday,
    x='hour',
    y='total',
    color = 'tab:pink'
)
plt.bar(max_col, plot_hour_workingday.loc[max_col, 'total'], color='tab:red', label='jam sewa terbanyak')

plt.title('Total Penyewaan Sepeda di Jam Tertentu pada Hari Kerja')
plt.xlabel('Jam Penyewaan')
plt.ylabel(None)
plt.legend()
plt.show()

#membuat variabel total data pelanggan berdasarkan jam pada hari libur
plot_hour_holiday = filter_holiday.groupby(by='hour').agg({
    'total': 'sum'
}).reset_index()

plt.figure(figsize=(10, 5))

# Menentukan indeks kolom dengan total terbesar
max_col = plot_hour_holiday['total'].idxmax()

# Membuat bar plot
sns.barplot(
    data=plot_hour_holiday,
    x='hour',
    y='total',
    color='tab:pink'
)
plt.bar(max_col, plot_hour_holiday.loc[max_col, 'total'], color='tab:red', label='Jam Sewa Terbanyak')

plt.title("Total Penyewaan Sepeda di Jam Tertentu pada Hari Libur")
plt.xlabel('Jam Penyewaan')
plt.ylabel(None)
plt.legend()
plt.show()

"""Dari 2 gambar Visualisasi diatas dapat dilihat bahwa jam penyewaan terbanyak pada hari kerja terjadi di jam 17.00. Sedangkan pada hari libur, penyewaan sepeda terbanyak di jam 13.00 siang

## Conclusion

- Conclution pertanyaan 1 :Penyewaan terbanyak berdasarkan musim adalah musin Fall dan yang paling sedikit yaitu pada musim Springer
- conclution pertanyaan 2 : Cuaca sangat mempengaruhi jumlah penyewaan sepeda. Pelanggan lebih memilih melakukan penyewaan saat cuaca sedan cerah/clear.
- conclution pertanyaan 3 : Pada hari kerja penyewaan sepeda paling banyak dilakukan dijam 17.00. Sedangkan pada hari libur penyewaan dilakukan di jam 13.00 siang

# Menerapkan Teknik Analisis Lanjutan

**RFM Analysis**
"""

rfm_df = hour.groupby(by="hour", as_index=False).agg({
    "date": "max",
    "instant": "nunique",
    "total": "sum"
})

# mengganti nama kolom
rfm_df.columns = ["hour", "last_order_date", "order_count", "revenue"]

# perhitungan recency per hari
rfm_df["last_order_date"] = rfm_df["last_order_date"].dt.date
recent_date = hour["date"].dt.date.max()
rfm_df["recency"] = rfm_df["last_order_date"].apply(lambda x: (recent_date - x).days)

# Drop kolom 'last_order_date'
rfm_df.drop("last_order_date", axis=1, inplace=True)

rfm_df.head()

top_recency = rfm_df.sort_values(by="recency", ascending=True).head(5)
top_frequency = rfm_df.sort_values(by="order_count", ascending=False).head(5)
top_monetary = rfm_df.sort_values(by="revenue", ascending=False).head(5)

#membuat bar plot RFM
fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(30, 6))

#plot top recency
sns.barplot(
    data=top_recency,
    x="hour",
    y="recency",
    color='tab:blue',
    ax=ax[0]
)
ax[0].set_ylabel(None)
ax[0].set_xlabel(None)
ax[0].set_title("Recency (days)", loc="center", fontsize=18)
ax[0].tick_params(axis ='x', labelsize=15)

#plot top frequency
sns.barplot(
    data=top_frequency,
    x="hour",
    y="order_count",
    color='tab:blue',
    ax=ax[1]
)
ax[1].set_ylabel(None)
ax[1].set_xlabel(None)
ax[1].set_title("Frequency", loc="center", fontsize=18)
ax[1].tick_params(axis='x', labelsize=15)

#plot top monetary
sns.barplot(
    data=top_monetary,
    x="hour",
    y="revenue",
    color='tab:blue',
    ax=ax[2]
)
ax[2].set_ylabel(None)
ax[2].set_xlabel(None)
ax[2].set_title("Monetary", loc="center", fontsize=18)
ax[2].tick_params(axis='x', labelsize=15)

plt.suptitle("Best Rental Hours Based on RFM Parameters", fontsize=20)
plt.show()

"""RFM Analysis digunakan untuk mencari top 5 hours berdasarkan 3 kategori yang berbeda dengan memanfaatkan nilai pada kolom jam. Kategori Recency didasarkan pada transaksi terbaru yang dilakukan pada jam tertentu. Frekuensi menunjukkan seberapa sering terjadi transaksi. Sedangkan kategori Monetary menunjukkan seberapa banyak transaksi yang terjadi pada jam tertentu."""

hour.to_csv("all_data.csv", index=False)

